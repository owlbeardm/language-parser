-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/language-parser#readme</a>
@package language-parser
@version 0.1.0.0

module Database.Base
type AppT = ReaderT SqlBackend
data LanguageName
Aboleth :: LanguageName
Alko :: LanguageName
ClassicalArcane :: LanguageName
Dragon :: LanguageName
Dwarven :: LanguageName
Elven :: LanguageName
English :: LanguageName
Halfling :: LanguageName
Infernal :: LanguageName
Kobold :: LanguageName
LizardFolk :: LanguageName
Necril :: LanguageName
Nerlendic :: LanguageName
Nitholan :: LanguageName
NitholanEmpire :: LanguageName
OldDragon :: LanguageName
OldNerlendic :: LanguageName
OldNitholan :: LanguageName
OldRunic :: LanguageName
Orkish :: LanguageName
PrimalMagic :: LanguageName
ProtoCreation :: LanguageName
ProtoDragon :: LanguageName
ProtoDwarven :: LanguageName
ProtoElven :: LanguageName
ProtoHuman :: LanguageName
ProtoMaterial :: LanguageName
ProtoMonster :: LanguageName
ProtoOrk :: LanguageName
ProtoTengu :: LanguageName
Queran :: LanguageName
SlaveRunic :: LanguageName
Sylvan :: LanguageName
Titan :: LanguageName
data PartOfSpeech
Adjective :: PartOfSpeech
Adverb :: PartOfSpeech
Conjunction :: PartOfSpeech
Determiner :: PartOfSpeech
Noun :: PartOfSpeech
Numeral :: PartOfSpeech
Prefix :: PartOfSpeech
Preposition :: PartOfSpeech
Pronoun :: PartOfSpeech
Suffix :: PartOfSpeech
Verb :: PartOfSpeech
connStr :: ConnectionString
runSQLAction :: SqlPersistT (ResourceT (NoLoggingT IO)) a -> IO a
instance Database.Persist.Class.PersistField.PersistField Database.Base.PartOfSpeech
instance Database.Persist.Sql.Class.PersistFieldSql Database.Base.PartOfSpeech
instance GHC.Show.Show Database.Base.PartOfSpeech
instance GHC.Read.Read Database.Base.PartOfSpeech
instance GHC.Enum.Enum Database.Base.PartOfSpeech
instance GHC.Classes.Eq Database.Base.PartOfSpeech
instance Database.Persist.Class.PersistField.PersistField Database.Base.LanguageName
instance Database.Persist.Sql.Class.PersistFieldSql Database.Base.LanguageName
instance GHC.Show.Show Database.Base.LanguageName
instance GHC.Read.Read Database.Base.LanguageName
instance GHC.Enum.Enum Database.Base.LanguageName
instance GHC.Classes.Eq Database.Base.LanguageName

module Database.Entity
type WordText = Text
type Comment = Text
type SoundRegex = Text
type Sound = Text
type Priority = Int64
data Language
Language :: !LanguageName -> Language
[languageLname] :: Language -> !LanguageName
type LanguageId = Key Language
data Word
Word :: !WordText -> !Key Language -> !PartOfSpeech -> !Bool -> Word
[wordWord] :: Word -> !WordText
[wordLangId] :: Word -> !Key Language
[wordPartOfSpeech] :: Word -> !PartOfSpeech
[wordForgotten] :: Word -> !Bool
type WordId = Key Word
data Translation
Translation :: !Key Word -> !Key Language -> !Maybe (Key Word) -> !Maybe Comment -> !Maybe Text -> Translation
[translationFromWordId] :: Translation -> !Key Word
[translationToLangId] :: Translation -> !Key Language
[translationToWordId] :: Translation -> !Maybe (Key Word)
[translationComment] :: Translation -> !Maybe Comment
[translationAltTranslation] :: Translation -> !Maybe Text
type TranslationId = Key Translation
data WordOrigin
WordOrigin :: !Key Word -> !Maybe Comment -> !Bool -> !Bool -> !Bool -> !Bool -> WordOrigin
[wordOriginWordId] :: WordOrigin -> !Key Word
[wordOriginComment] :: WordOrigin -> !Maybe Comment
[wordOriginEvolvedYn] :: WordOrigin -> !Bool
[wordOriginMigratedYn] :: WordOrigin -> !Bool
[wordOriginCombinedYn] :: WordOrigin -> !Bool
[wordOriginDerivatedYn] :: WordOrigin -> !Bool
type WordOriginId = Key WordOrigin
data WordOriginFrom
WordOriginFrom :: !Key Word -> !Key WordOrigin -> WordOriginFrom
[wordOriginFromWordFromId] :: WordOriginFrom -> !Key Word
[wordOriginFromOriginId] :: WordOriginFrom -> !Key WordOrigin
type WordOriginFromId = Key WordOriginFrom
data EvolveLaw
EvolveLaw :: !Key Language -> !Key Language -> !SoundRegex -> !Sound -> !Priority -> EvolveLaw
[evolveLawLangFromId] :: EvolveLaw -> !Key Language
[evolveLawLangToId] :: EvolveLaw -> !Key Language
[evolveLawSoundRegexFrom] :: EvolveLaw -> !SoundRegex
[evolveLawSoundTo] :: EvolveLaw -> !Sound
[evolveLawPriority] :: EvolveLaw -> !Priority
type EvolveLawId = Key EvolveLaw
migrateAll :: Migration
findLangByName :: MonadIO m => LanguageName -> AppT m (Maybe (Entity Language))
instance GHC.Show.Show Database.Entity.EvolveLaw
instance GHC.Show.Show Database.Entity.WordOriginFrom
instance GHC.Show.Show Database.Entity.WordOrigin
instance GHC.Show.Show Database.Entity.Translation
instance GHC.Classes.Eq Database.Entity.Word
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Database.Entity.Language)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Unique Database.Entity.Language)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Database.Entity.Word)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Unique Database.Entity.Word)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Database.Entity.Translation)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOrigin)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Unique Database.Entity.WordOrigin)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Database.Entity.WordOriginFrom)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Database.Entity.EvolveLaw)
instance Database.Persist.Class.PersistField.PersistField Database.Entity.EvolveLaw
instance Database.Persist.Sql.Class.PersistFieldSql Database.Entity.EvolveLaw
instance Database.Persist.Class.PersistEntity.PersistEntity Database.Entity.EvolveLaw
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Database.Entity.EvolveLaw
instance Database.Persist.Class.PersistField.PersistField Database.Entity.WordOriginFrom
instance Database.Persist.Sql.Class.PersistFieldSql Database.Entity.WordOriginFrom
instance Database.Persist.Class.PersistEntity.PersistEntity Database.Entity.WordOriginFrom
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Database.Entity.WordOriginFrom
instance Database.Persist.Class.PersistField.PersistField Database.Entity.WordOrigin
instance Database.Persist.Sql.Class.PersistFieldSql Database.Entity.WordOrigin
instance Database.Persist.Class.PersistEntity.PersistEntity Database.Entity.WordOrigin
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Database.Entity.WordOrigin
instance Database.Persist.Class.PersistField.PersistField Database.Entity.Translation
instance Database.Persist.Sql.Class.PersistFieldSql Database.Entity.Translation
instance Database.Persist.Class.PersistEntity.PersistEntity Database.Entity.Translation
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Database.Entity.Translation
instance Database.Persist.Class.PersistField.PersistField Database.Entity.Word
instance Database.Persist.Sql.Class.PersistFieldSql Database.Entity.Word
instance Database.Persist.Class.PersistEntity.PersistEntity Database.Entity.Word
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Database.Entity.Word
instance Database.Persist.Class.PersistField.PersistField Database.Entity.Language
instance Database.Persist.Sql.Class.PersistFieldSql Database.Entity.Language
instance Database.Persist.Class.PersistEntity.PersistEntity Database.Entity.Language
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Database.Entity.Language
instance GHC.Show.Show Database.Entity.Language

module Database.Word
findWordById_ :: MonadIO m => Int64 -> AppT m [Entity Word]
findWordById :: MonadIO m => Int64 -> AppT m (Maybe (Entity Word))
addWord :: MonadIO m => WordText -> Key Language -> PartOfSpeech -> Bool -> AppT m (Key Word)
addWordByLangName :: (MonadIO m, MonadLogger m) => WordText -> PartOfSpeech -> LanguageName -> AppT m (Maybe (Key Word))
addEvolvedWord :: MonadIO m => WordText -> PartOfSpeech -> Key Word -> Key Language -> AppT m (Key Word)
findWord :: MonadIO m => Entity Language -> WordText -> PartOfSpeech -> AppT m (Maybe (Entity Word))
findWordsByText :: MonadIO m => WordText -> AppT m [Entity Word]
findWordsByAncestorText :: MonadIO m => WordText -> AppT m [Entity Word]
listWordsByLang :: MonadIO m => LanguageName -> AppT m [Entity Word]
listWordsByLangAndSound :: MonadIO m => LanguageName -> Text -> AppT m [Entity Word]
listNotForgottenWordsByLang :: MonadIO m => LanguageName -> AppT m [Entity Word]
listNotEvolvedWordsByLangFromAndTo :: MonadIO m => LanguageName -> LanguageName -> AppT m [Entity Word]
listCombinedWordsByLangFromAndTo :: MonadIO m => LanguageName -> LanguageName -> AppT m [Entity Word]
listEvolvedWordsByLangFromAndTo :: MonadIO m => LanguageName -> LanguageName -> AppT m [Entity Word]
listEvolvedWordsToKeysByWordFromAndTo :: MonadIO m => Entity Word -> LanguageName -> AppT m [Entity Word]
deleteEvolvedWordsByLangFromAndTo :: MonadIO m => LanguageName -> LanguageName -> AppT m ()
getAllWordOrigins :: MonadIO m => Entity Word -> AppT m [(Entity Word, Entity Language)]
getWordOrigin :: MonadIO m => Entity Word -> AppT m (Maybe (Entity WordOrigin))
getWordFromWordLang :: MonadIO m => Entity WordOrigin -> AppT m [(Entity Word, Entity Language)]
getEvolvedWord :: MonadIO m => LanguageName -> Entity Word -> AppT m [Entity Word]
listWordsInfo :: MonadIO m => LanguageName -> ([Entity Word] -> a) -> AppT m a

module Language.Language
evolveWordText :: WordText -> [EvolveLaw] -> WordText

-- | The <a>changeWord</a> function changes a word.
changeWord :: WordText -> EvolveLaw -> WordText

module Database.Language
findLangById_ :: MonadIO m => Int64 -> AppT m [Entity Language]
findLangById :: MonadIO m => Int64 -> AppT m (Maybe (Entity Language))
findLangByKey :: MonadIO m => Key Language -> AppT m [Entity Language]
listLangs :: MonadIO m => AppT m [Entity Language]
addLang :: MonadIO m => LanguageName -> AppT m (Key Language)
insertEvolvedWord :: MonadIO m => WordText -> PartOfSpeech -> Key Word -> Key Language -> AppT m (Key Word)
insertCombinedWord :: MonadIO m => WordText -> PartOfSpeech -> Key Language -> [Key Word] -> AppT m (Key Word)
listEvolveLawsByLangs :: MonadIO m => LanguageName -> LanguageName -> AppT m [Entity EvolveLaw]
combineWord :: MonadIO m => WordText -> PartOfSpeech -> LanguageName -> [Int64] -> AppT m (Maybe (Key Word))
evolvedWord :: MonadIO m => [EvolveLaw] -> Entity Word -> Key Language -> AppT m (Key Word)
evolveLang :: MonadIO m => LanguageName -> LanguageName -> AppT m (Maybe (Int, LanguageName, LanguageName))
reEvolveLang :: MonadIO m => LanguageName -> LanguageName -> AppT m (Maybe (Int, LanguageName, LanguageName))
updateWord :: MonadIO m => (Entity Word, Text) -> AppT m Int64
doLangWithAll :: MonadIO m => (LanguageName -> LanguageName -> AppT m (Maybe (Int, LanguageName, LanguageName))) -> LanguageName -> [LanguageName] -> AppT m [(Int, LanguageName, LanguageName)]
doAllLangWithAll :: MonadIO m => (LanguageName -> LanguageName -> AppT m (Maybe (Int, LanguageName, LanguageName))) -> AppT m [(Int, LanguageName, LanguageName)]
evolveAllLangWithAll :: MonadIO m => AppT m [(Int, LanguageName, LanguageName)]
reEvolveAllLangWithAll :: MonadIO m => AppT m [(Int, LanguageName, LanguageName)]
traceWordEvolve :: MonadIO m => WordText -> [LanguageName] -> AppT m [WordText]

module Database.Translation
type FullTranslation = (Translation, Word, Language, Language, Maybe Word)
type WordTranslation = (Translation, Language, Maybe Word)
type WordAndLang = (Word, Language)
type WordSource = (WordAndLang, [WordTranslation])
type WordDescription = (Entity Word, [Language], [WordTranslation], [WordSource])
translate :: WordText -> IO [FullTranslation]
translateWord :: MonadIO m => Text -> AppT m [WordDescription]
getFullWordDescription :: MonadIO m => [Entity Word] -> AppT m [WordDescription]
findWordsByTranslation :: MonadIO m => Text -> AppT m [Entity Word]
getWordTranslations :: MonadIO m => Entity Word -> AppT m [WordTranslation]
printAllTranslationsByLang :: LanguageName -> IO [FullTranslation]
addTranslationFromTo :: (MonadIO m, MonadLogger m) => WordText -> PartOfSpeech -> LanguageName -> WordText -> PartOfSpeech -> LanguageName -> Maybe Comment -> AppT m (Maybe (Key Translation))
addTranslationFromAlt :: (MonadIO m, MonadLogger m) => WordText -> PartOfSpeech -> LanguageName -> LanguageName -> Maybe Comment -> Text -> AppT m (Maybe (Key Translation))
addTranslationFromToByKeys :: (MonadIO m, MonadLogger m) => Int64 -> Int64 -> Maybe Comment -> AppT m (Maybe (Key Translation))

module Language.Sounds
vovels :: Text
isVowel :: Char -> Bool
splitOnAnyOf :: [Text] -> Text -> [Text]
getConsonantClustersFiltered :: (Text -> [Text] -> [Text]) -> [Text] -> [Text]
filterFirstCluster :: Text -> [Text] -> [Text]
filterLastCluster :: Text -> [Text] -> [Text]
filterAllClusters :: Text -> [Text] -> [Text]

module Language.Word
getWordsSounds :: [Entity Word] -> Text
getWordsConstClusters :: [Entity Word] -> [Text]
getWordsConstStartingClusters :: [Entity Word] -> [Text]
getWordsConstLastClusters :: [Entity Word] -> [Text]

module PhoneticChanges

module Platform.HTTP

module Print.Console
square :: Int -> Int
printLangs :: IO ()
printWordsFrom :: LanguageName -> IO ()
printWordsFromBySound :: LanguageName -> Text -> IO ()
printWordsSoundsFromLang :: LanguageName -> IO ()
printWordsConstClusters :: LanguageName -> IO ()
printWordsConstStartingClusters :: LanguageName -> IO ()
printWordsConstLastClusters :: LanguageName -> IO ()
printLookupWord :: Text -> IO ()
printLookupWordByAncestor :: Text -> IO ()
printTranslate :: Text -> IO ()
printNotEvolvedWordsFrom :: LanguageName -> LanguageName -> IO ()
printEvolveLaws :: LanguageName -> LanguageName -> IO ()
printTraceWordEvolve :: WordText -> [LanguageName] -> IO ()
cEvolveLangs :: LanguageName -> LanguageName -> IO ()
cEvolveAllLangWithAll :: IO ()
cReEvolveAllLangWithAll :: IO ()
cdoAllLangWithAll :: MonadIO m => (LanguageName -> LanguageName -> AppT m (Maybe (Int, LanguageName, LanguageName))) -> ReaderT SqlBackend m ()
cReEvolveLangs :: LanguageName -> LanguageName -> IO ()
prettyEvolveResult :: (Int, LanguageName, LanguageName) -> Doc AnsiStyle
tshowWord :: Word -> Text
tshowPretty :: (a -> Doc AnsiStyle) -> a -> Text
prettyWordDescription :: WordDescription -> Doc AnsiStyle
prettyShortTranslation :: WordTranslation -> Doc AnsiStyle
prettyWordSource :: WordSource -> Doc AnsiStyle
prettyWordAndLang :: WordAndLang -> Doc AnsiStyle
prettyWord :: Word -> Doc AnsiStyle
prettyEWord :: Entity Word -> Doc AnsiStyle
prettyWT :: WordTranslation -> Doc AnsiStyle
conShow :: PartOfSpeech -> Text

module Lib
main :: IO ()

module Print.File
printLangsGML :: IO ()
prettyLangs :: MonadIO m => [Entity Language] -> AppT m (Doc AnsiStyle)
castProd :: [Entity Language] -> [Entity Language] -> [(Entity Language, Entity Language)]
prettyLangToLangEdge :: MonadIO m => (Entity Language, Entity Language) -> AppT m (Doc AnsiStyle)
prettyEdge :: Entity Language -> Entity Language -> Bool -> Text -> Text -> Doc AnsiStyle
prettyLang :: Entity Language -> Doc AnsiStyle

module Print.UnescapingPrint
unEscapingShow :: (ToUnescaping t, Show (ToUnescapingTF t)) => t -> String
ushow :: (ToUnescaping t, Show (ToUnescapingTF t)) => t -> String
unEscapingPrint :: (ToUnescaping t, Show (ToUnescapingTF t)) => t -> IO ()
uprint :: (ToUnescaping t, Show (ToUnescapingTF t)) => t -> IO ()
instance Print.UnescapingPrint.ToUnescaping GHC.Types.Char
instance GHC.Show.Show a => Print.UnescapingPrint.ToUnescaping a
instance GHC.Show.Show Print.UnescapingPrint.UnescapingChar
